apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.deployment.labels.app }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.deployment.labels.app }}
  template:
    metadata:
      labels:
        app: {{ .Values.deployment.labels.app }}
    spec:
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 0
      serviceAccountName: {{ .Values.deployment.serviceAccountName }}
      restartPolicy: Always
      imagePullSecrets:
      {{- range .Values.deployment.imagePullSecrets }}
        - name: {{ .name }}
      {{- end }}

      containers:
      - name: {{ .Values.deployment.container.name }}
        image: {{ .Values.deployment.container.image }}
        imagePullPolicy: {{ .Values.deployment.container.imagePullPolicy }}
        ports:
          {{- range .Values.deployment.container.ports }}
          - containerPort: {{ .containerPort }}
          {{- end }}
        env:
        - name: DB_HOST
          value: "{{ .Values.deployment.container.env.DB_HOST }}"
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.deployment.container.env.DB_PORT_CONFIGMAP }}"
              key: "{{ .Values.deployment.container.env.DB_PORT_KEY }}"
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.deployment.container.env.DB_USERNAME_SECRET }}"
              key: "{{ .Values.deployment.container.env.DB_USERNAME_KEY }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.deployment.container.env.DB_PASSWORD_SECRET }}"
              key: "{{ .Values.deployment.container.env.DB_PASSWORD_KEY }}"
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.deployment.container.env.DB_NAME_CONFIGMAP }}"
              key: "{{ .Values.deployment.container.env.DB_NAME_KEY }}"
        - name: STORAGE_BUCKET_NAME
          value: "{{ .Values.deployment.container.env.STORAGE_BUCKET_NAME }}"
        - name: GOOGLE_PROJECT_ID
          value: "{{ .Values.deployment.container.env.GOOGLE_PROJECT_ID }}"
        - name: KAFKA_TRACE_TOPIC
          value: "trace_metadata"
        - name: KAFKA_BROKER
          value: "kafka.kafka.svc.cluster.local:9092"
        startupProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.deployment.container.livelinessProbe.httpGet.port | default 8080 }}
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 20
        livenessProbe:
          httpGet:
            path: {{ .Values.deployment.container.livelinessProbe.httpGet.path }}
            port: {{ .Values.deployment.container.livelinessProbe.httpGet.port }}
          initialDelaySeconds: {{ .Values.deployment.container.livelinessProbe.initialDelaySeconds}}
          periodSeconds: {{ .Values.deployment.container.livelinessProbe.periodSeconds}}
          failureThreshold: {{ .Values.deployment.container.livelinessProbe.failureThreshold}}
          successThreshold: {{ .Values.deployment.container.livelinessProbe.successThreshold}}
          timeoutSeconds: {{ .Values.deployment.container.livelinessProbe.timeoutSeconds}}
        readinessProbe:
          httpGet:
            path: {{ .Values.deployment.container.readinessProbe.httpGet.path }}
            port: {{ .Values.deployment.container.readinessProbe.httpGet.port }}
          initialDelaySeconds: {{ .Values.deployment.container.readinessProbe.initialDelaySeconds}}
          periodSeconds: {{ .Values.deployment.container.readinessProbe.periodSeconds}}
          failureThreshold: {{ .Values.deployment.container.readinessProbe.failureThreshold}}
          successThreshold: {{ .Values.deployment.container.readinessProbe.successThreshold}}
          timeoutSeconds: {{ .Values.deployment.container.readinessProbe.timeoutSeconds}}
      - name: autoinstrumentation-go
        image: otel/autoinstrumentation-go:latest
        imagePullPolicy: IfNotPresent
        env:
          - name: OTEL_GO_AUTO_TARGET_EXE
            value: /go/bin/webapp  # Replace with your Go binary path
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: "http://jaeger.webapp.svc.cluster.local:4318"  # Points to collector
          - name: OTEL_SERVICE_NAME
            value: "webapp-service"
          - name: OTEL_EXPORTER_OTLP_PROTOCOL
            value: "http/protobuf"  # Use HTTP for OTLP
          - name: OTEL_PROPAGATORS
            value: "tracecontext,baggage"  # Matches service mesh defaults
          - name: OTEL_METRICS_EXPORTER
            value: "otlp"  # Export metrics to OTLP (for Prometheus)
          - name: OTEL_TRACES_EXPORTER
            value: "otlp"  # Export traces to OTLP (for Jaeger)
          - name: OTEL_LOG_LEVEL
            value: "debug"  # Set log level to debug for detailed output
          - name: OTEL_GO_AUTO_INCLUDE_DB_STATEMENT
            value: "true"  # Include DB statements in traces
          - name: OTEL_GO_AUTO_PARSE_DB_STATEMENT
            value: "true"  # Parse DB statements for better trace context
        securityContext:
          runAsUser: 0  # Root privileges required
          privileged: true  # Required for ptrace
      initContainers:
      - name: {{ .Values.deployment.initContainer.name }}
        image: {{ .Values.deployment.initContainer.image }}
        imagePullPolicy: {{ .Values.deployment.initContainer.imagePullPolicy }}
        env:
        - name: DB_HOST
          value: "{{ .Values.deployment.initContainer.env.DB_HOST }}"
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.deployment.initContainer.env.DB_PORT_CONFIGMAP }}"
              key: "{{ .Values.deployment.initContainer.env.DB_PORT_KEY }}"
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.deployment.initContainer.env.DB_USERNAME_SECRET }}"
              key: "{{ .Values.deployment.initContainer.env.DB_USERNAME_KEY }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.deployment.initContainer.env.DB_PASSWORD_SECRET }}"
              key: "{{ .Values.deployment.initContainer.env.DB_PASSWORD_KEY }}"
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.deployment.initContainer.env.DB_NAME_CONFIGMAP }}"
              key: "{{ .Values.deployment.initContainer.env.DB_NAME_KEY }}"
        - name: DB_SCHEMA
          valueFrom:
            configMapKeyRef:
              name: "{{ .Values.deployment.initContainer.env.DB_SCHEMA_CONFIGMAP }}"
              key: "{{ .Values.deployment.initContainer.env.DB_SCHEMA_KEY }}"
